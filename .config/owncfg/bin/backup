#!/bin/bash

back_up_files=(~/Archives ~/Downloads ~/build ~/dev ~/themes ~/VMs \
    ~/.ssh ~/.config/owncfg ~/.themes ~/.icons ~/.mozilla \
    ~/.local/share ~/.gist-vim)
back_up_dir="/home/shivalva/Archives/backup"
back_up_internalhdd="/media/sdc1"
back_up_externalhdd="/mnt/backup/rsync"
script_name=$(basename "$0")
remote_host="eee"

# Backup/sync ~/.config to a remote host
if [[ $1 = "-r" || $1 = "--remote" ]]; then
    rsync -aPh --delete -e ssh ~/.config/owncfg --exclude 'txt' $remote_host:.config

# Backup/sync $back_up_files to $back_up_internalhdd
elif [[ $1 = "-i" || $1 = "--internalhdd" ]]; then
    mounted=$(mountpoint $back_up_internalhdd)
    if [ -n "$mounted" ]; then
        # Is $back_up_internalhdd a mountpoint?
        if [[ $mounted =~ "is a mountpoint" ]]; then
            echo "Backing up in local disk"
            for i in "${back_up_files[@]}"; do
                rsync -aPh --delete --delete-excluded --exclude 'win-xp/Snapshots' "$i" ${back_up_internalhdd}/backup/rsync
            done

        # If $back_up_internalhdd is not a mountpoint, mount it and backup/sync $back_up_files
        else
            echo "Dir not mounted, mounting now..."
            sudo mount /dev/sdc1 $back_up_internalhdd && \
            for i in "${back_up_files[@]}"; do
                rsync -aPh --delete --delete-excluded --exclude 'win-xp/Snapshots' "$i" ${back_up_internalhdd}/backup/rsync
            done && \
            sleep 4s && sudo umount $back_up_internalhdd
        fi

    else
        echo "Couldn't find the backup directory"
    fi

# Backup/sync $back_up_files to $back_up_externalhdd
elif [[ $1 = "-e" || $1 = "--externalhdd" ]]; then
    # Does $back_up_externalhdd exist?
    if [ -d "$back_up_externalhdd" ];then
        for i in "${back_up_files[@]}"; do
            rsync -aPh --delete --delete-excluded "$i" "$back_up_externalhdd"
        done

    else
        echo "Dir $back_up_externalhdd does not exist"
    fi

# Backup single file to specified dir in $back_up_dir
elif [ -n "$1" ] && [ -f "$1" ]; then
    if [ -d "$back_up_dir" ]; then

        date=$(date "+%G-%j-%H%M%S")
        file_name=$(basename "$1")
        dir_name=$(dirname "$1")
        dir_name=${dir_name#$HOME/}

        # What to do if we run the script on the same dir as file
        if [[ $dir_name == "." ]]; then
            echo "We are on the same dir as the file"
            dir_name=$(pwd)
            dir_name=${dir_name#$HOME/}
        fi
        # What to do if we backup a file that's under $HOME (1 level depth)
        # E.g. $HOME/1_level_depth_file
        if [[ $dir_name == $HOME ]]; then
            echo "File is in home"
            cp "$1" "$back_up_dir/$date-$file_name"
            echo "$file_name -> Backed up to: $back_up_dir/$date-$file_name"
        # What to do if the dir does not exist
        elif [ ! -d "$back_up_dir/$dir_name/" ]; then
            # We don't care about symlinks when copying
            echo "Dir does not exist. Let's create it"
            pushd . > /dev/null
            cd "$back_up_dir"
            mkdir -p $dir_name
            popd > /dev/null
            cp "$1" "$back_up_dir/$dir_name/$date-$file_name"
            echo "$file_name -> Backed up to: $back_up_dir/$dir_name/$date-$file_name"
        # What to do if dir exists
        else
            echo "Dir exists, just copy the file"
            cp "$1" "$back_up_dir/$dir_name/$date-$file_name"
            echo "$file_name -> Backed up to: $back_up_dir/$dir_name/$date-$file_name"
        fi
    else
        echo "$back_up_dir Does not exist"
    fi

# No valid arguments were given, so display a help
else 
    printf "Usage:\n \
        $script_name --internalhdd (-i) \tTo sync files with internal hdd.\n \
        $script_name --externalhdd (-e) \tTo sync files with external hdd.\n \
        $script_name --remote (-r) \t\tTo sync files remotely (eee host).\n \
        $script_name \$filename \t\tTo backup single file to \$back_up_dir.\n"
fi
