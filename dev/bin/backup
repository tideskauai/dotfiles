#!/bin/bash

back_up_files=(~/Archives ~/Downloads ~/build ~/dev ~/themes ~/VMs \
    ~/.ssh ~/.dotfiles ~/.themes ~/.icons ~/.mozilla \
    ~/.local ~/.gist-vim ~/.kde4)
back_up_dir="/home/shivalva/Archives/backup"
back_up_internalhdd="/media/sdc1"
back_up_externalhdd="/mnt/backup"
script_name=$(basename "$0")

# Backup/sync $back_up_files to $back_up_internalhdd
if [[ $1 = "-i" || $1 = "--internalhdd" ]]; then
    mounted=$(mountpoint $back_up_internalhdd)
    if [ -n "$mounted" ]; then
        # Is $back_up_internalhdd a mountpoint?
        if [[ $mounted =~ "is a mountpoint" ]]; then
            # Is $back_up_internalhdd mounted as read-only?
            if [[ $(grep $back_up_internalhdd /proc/mounts) =~ "ro," ]]; then
                echo "$back_up_internalhdd is mounted as read-only, remounting as read-write"
                sudo mount -o remount,rw $back_up_internalhdd
            fi
            echo "Backing up in local disk"
            for i in "${back_up_files[@]}"; do
                rdiff-backup -v5 --print-statistics "$i" ${back_up_internalhdd}/backup/rdiff-backup/"$i"
            done

        # If $back_up_internalhdd is not a mountpoint, mount it and backup/sync $back_up_files
        else
            echo "Dir not mounted, mounting now..."
            sudo mount /dev/sdc1 $back_up_internalhdd && \
            for i in "${back_up_files[@]}"; do
                rdiff-backup -v5 --print-statistics "$i" ${back_up_internalhdd}/backup/rdiff-backup/"$i"
                # List increments of backups
                # rdiff-backup --list-increments ${back_up_internalhdd}/backup/rdiff-backup/"$i"
                # Remove backups older than 1 year
                # rdiff-backup --force --remove-older-than 1Y ${back_up_internalhdd}/rdiff-backup/"$i"
            done && sleep 5s
        fi
    echo "Remounting $back_up_internalhdd as read-only"
    sudo mount -o remount,ro $back_up_internalhdd
    else
        echo "Couldn't find the backup directory"
    fi

# Backup/sync $back_up_files to $back_up_externalhdd
elif [[ $1 = "-e" || $1 = "--externalhdd" ]]; then
    # Does $back_up_externalhdd exist?
    if [ -d "$back_up_externalhdd" ]; then
        # Check if /media/sdc1 is mounted, if not mount in read-only mode
        mounted=$(mountpoint $back_up_internalhdd)
        if [ -n "$mounted" ]; then
            if [[ $mounted =~ "is a mountpoint" ]]; then
                rsync -aPh --delete --delete-excluded ${back_up_internalhdd}/backup/rdiff-backup \
                    ${back_up_externalhdd}
            else
                echo "Dir $back_up_internalhdd" is not mounted
            fi
        fi
    else
        echo "Dir $back_up_externalhdd does not exist"
    fi

# Backup /etc files to $back_up_dir/etc
elif [[ $1 = "--etc" ]]; then
    # Specify which files in /etc I want to backup
    if [ -d "$back_up_dir/etc" ]; then
        rsync -aPh --delete --delete-excluded "/etc/" "$back_up_dir/etc"
    else
        echo "$back_up_dir/etc does not exist, please create it"
    fi

# Backup single file to specified dir in $back_up_dir
elif [ -n "$1" ] && [ -f "$1" ]; then
    if [ -d "$back_up_dir" ]; then

        date=$(date "+%G-%j-%H%M%S")
        file_name=$(basename "$1")
        resolved_path=$(realpath "$1")
        # We were asked to backup a file that is in our home directory
        if [[ $resolved_path =~ "$HOME" ]]; then
            dir_name=${resolved_path#$HOME/}
            dir_name=${dir_name%$file_name}
            # What to do if the dir does not exist
            if [ ! -d "$back_up_dir/$dir_name/" ]; then
                echo "Dir does not exist. Let's create it"
                pushd . > /dev/null
                cd "$back_up_dir"
                mkdir -p $dir_name
                popd > /dev/null
                cp "$1" "$back_up_dir/$dir_name$date-$file_name"
                echo "$file_name was backed up to: $back_up_dir/$dir_name$date-$file_name"
            # What to do if dir exists
            else
                echo "Dir exists, just copy the file"
                cp "$1" "$back_up_dir/$dir_name$date-$file_name"
                echo "$file_name was backed up to: $back_up_dir/$dir_name$date-$file_name"
            fi
        # We were asked to backup a file that is not in our home directory
        else
            echo "Error: The specified backup file doe not reside inside your home directory"
        fi
    else
        echo "$back_up_dir Does not exist"
    fi

# No valid arguments were given, so display a help
else 
    printf "Usage:\n \
        $script_name --internalhdd (-i) \tTo sync files with internal hdd.\n \
        $script_name --externalhdd (-e) \tTo sync files with external hdd.\n \
        $script_name --etc          \t\tTo sync /etc files to \$back_up_dir/etc.\n \
        $script_name \$filename \t\tTo backup single file to \$back_up_dir.\n"
fi
