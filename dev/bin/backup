#!/bin/bash

# Explanation: This script offers four ways of backing up data.
#
# The --internalhdd switch backs up all the files I have defined in the
# back_up_files array (folder/files in my $HOME) to the path specified by
# the variable back_up_internalhdd. It uses rdiff-backup for backing up
# those files and depending on the folder different removal settings are used.
#
# The --etc switch backs up all the files I have defined in the back_up_etc
# array to the path specified by the variable back_up_dir (in a folder called etc).
# It uses rsync for backing up, and to keep a history of the changes I use
# git (VCS) on $back_up_dir
#
# The switch --a-to-b allows me to rsync between two directories.
#
# The last way of backing up is by giving this script the path to a file as the 'first'
# and only argument. It then copies that file to the path specified by the back_up_dir
# variable. It only works inside of $HOME and keeps the folder structure. For example, if
# we back up $HOME/Downloads/afile.txt, this script would save it in
# $HOME/path/specified/by/back_up_dir/Downloads/2013-177-040133-afile.txt
# A date is prepended to the file, 2013 is the year, 177 is the day of the year (0..356),
# 04 is the hour, 01 is the minute, and 33 is the second at which it was saved.

back_up_files=(~/Archives ~/Downloads ~/dev ~/themes ~/VMs \
    ~/.ssh ~/.dotfiles ~/.themes ~/.mozilla \
    ~/.local ~/.gem ~/.cabal)
back_up_etc=(iptables ssh X11 modules-load.d \
    conf.d systemd udev default modprobe.d modules-load.d qemu lxc \
    sysctl.d chrony.conf hostname hosts ethers locale.conf locale.gen \
    makepkg.conf pacman.conf resolv.conf timezone \
    vconsole.conf localtime adjtime minirc.dfl arptables.conf)
back_up_dir="$HOME/Archives/backup"
back_up_internalhdd="/media/sdb1"
script_name=$(basename "$0")
partition="sdb1"

usage ()
{
    printf "Usage:\n \
        Only one argument may be used at a time.\n \
        $script_name --help        (-h) \tPrint this message.\n \
        $script_name --internalhdd (-i) \tTo sync files with internal hdd.\n \
        $script_name --a-to-b       \t\tTo rsync between two dirs.\n \
        $script_name --etc          \t\tTo sync /etc files to \$back_up_dir/etc.\n \
        $script_name \$filename \t\tTo backup single file to \$back_up_dir.\n\n \
        To restore a backup use: \n \
        rdiff-backup --restore-as-of now \$backed_up_dir \$local_dir\n"
}

backup_my_files ()
{
    for i in "${back_up_files[@]}"; do
        case "$i" in
            ~/Archives)
                printf "\n#### Backing up $i ####\n"
                symlink_backup_workaround "$i"
                rdiff-backup --force --remove-older-than 2B "$back_up_internalhdd"/backup/"$i"
                ;;
            ~/dev)
                printf "\n#### Backing up $i ####\n"
                symlink_backup_workaround "$i"
                rdiff-backup --force --remove-older-than 2Y "$back_up_internalhdd"/backup/"$i"
                rdiff-backup --list-increments "$back_up_internalhdd"/backup/"$i"
                ;;
            ~/VMs)
                printf "\n#### Backing up $i ####\n"
                symlink_backup_workaround "$i"
                rdiff-backup --force --remove-older-than 2B "$back_up_internalhdd"/backup/"$i"
                ;;
            *)
                printf "\n#### Backing up $i ####\n"
                symlink_backup_workaround "$i"
                rdiff-backup --force --remove-older-than 1M "$back_up_internalhdd"/backup/"$i"
                ;;
        esac
    done
}

symlink_backup_workaround ()
{
    # rdiff-backup will return "fatal error source is not a directory" if the directory we're backing up
    # is a symlink, so we will work around this issue by moving to the directory if it's a symlink and
    # backing up everything that's inside the dir.
    # source: http://old.nabble.com/Fatal-Error:-Source-is-not-a-directory-td23145518.html
    if [ -h $1 ]; then
        # Redirect STDOUT to /dev/null
        pushd $(pwd) > /dev/null
        cd "$1"
        rdiff-backup -v3 --print-statistics . "$back_up_internalhdd"/backup/"$1"
        # Redirect STDOUT to /dev/null
        popd > /dev/null
    else
        rdiff-backup -v2 --print-statistics "$1" "$back_up_internalhdd"/backup/"$1"
    fi
}

# Print help if incorrect number of arguments are given
if (($# != 1 && $# != 3)); then
    usage

# Print help if we're given 3 args and we're not using --a-to-b (as first arg)
elif (($# == 3)) && [[ $1 != "--a-to-b" ]]; then
    usage

# Backup/sync $back_up_files to $back_up_internalhdd
elif [[ $1 == "-i" || $1 == "--internalhdd" ]]; then
    mounted=$(mountpoint $back_up_internalhdd)
    if [ -n "$mounted" ]; then
        # Is $back_up_internalhdd a mountpoint?
        if [[ $mounted =~ "is a mountpoint" ]]; then
            # Is $back_up_internalhdd mounted as read-only?
            if [[ $(grep $back_up_internalhdd /proc/mounts) =~ "ro," ]]; then
                printf "$back_up_internalhdd is mounted as read-only, remounting as read-write\n"
                sudo mount -o remount,rw $back_up_internalhdd
            fi
            printf "Backing up in local disk\n"
            backup_my_files
        # If $back_up_internalhdd is not a mountpoint, mount it and backup/sync $back_up_files
        else
            printf "Dir not mounted, mounting now...\n"
            sudo mount /dev/$partition $back_up_internalhdd && \
            backup_my_files
            sleep 5s
        fi
    printf "Remounting $back_up_internalhdd as read-only\n"
    sudo mount -o remount,ro $back_up_internalhdd
    else
        printf "Couldn't find the backup directory\n"
    fi

# Backup /etc files to $back_up_dir/etc
elif [[ $1 == "--etc" ]]; then
    # Specify which files in /etc I want to backup
    if [ -d "$back_up_dir/etc" ]; then
        for i in "${back_up_etc[@]}"; do
            rsync --archive --progress --human-readable --delete --delete-excluded "/etc/"$i"" "$back_up_dir/etc"
        done
    else
        printf "$back_up_dir/etc does not exist, please create it\n"
    fi

# Rsync between to directories
elif [[ $1 == "--a-to-b" ]]; then
    txt_red=$(tput setaf 1)
    txt_reset=$(tput sgr0)
    # Either of the following variations must be used (notice we omit dest on #2 on purpose)
    # 1) <rsync_command> . /path/to/dest
    # 2) <rsync_command> /path/to/src /path/to/
    # Otherwise, we might end up moving files to an unintentional folder
    rsync --archive --delete --delete-excluded --dry-run --out-format='%i %n%L' "$2" "$3"
    echo "###########################"
    echo "######### Warning #########"
    echo "###########################"
    echo "Files in $txt_red$(readlink -f $3)$txt_reset will be modified and potentially DELETED by the files in $txt_red$(readlink -f $2)$txt_reset"
    read -p "Are you sure you want to make these changes? [N/y] " yes_or_no
    if [[ $yes_or_no == "y" ]]; then
        rsync --archive --progress --human-readable --delete --delete-excluded "$2" "$3"
    else
        echo "Changes not commited"
    fi

# Backup single file to specified dir in $back_up_dir
elif [[ -n $1 ]] && [[ -f $1 ]]; then
    if [[ -d "$back_up_dir" ]]; then

        date=$(date "+%G-%j-%H%M%S")
        file_name=$(basename "$1")
        resolved_path=$(realpath "$1")
        # We were asked to backup a file that is in our home directory
        if [[ $resolved_path =~ "$HOME" ]]; then
            dir_name=${resolved_path#$HOME/}
            dir_name=${dir_name%$file_name}
            # What to do if the dir does not exist
            if [[ ! -d "$back_up_dir/$dir_name/" ]]; then
                printf "Dir does not exist. Let's create it\n"
                pushd . > /dev/null
                cd "$back_up_dir"
                mkdir -p $dir_name
                popd > /dev/null
                cp "$1" "$back_up_dir/$dir_name$date-$file_name"
                printf "$file_name was backed up to: $back_up_dir/$dir_name$date-$file_name\n"
            # What to do if dir exists
            else
                printf "Dir exists, just copy the file\n"
                cp "$1" "$back_up_dir/$dir_name$date-$file_name"
                printf "$file_name was backed up to: $back_up_dir/$dir_name$date-$file_name\n"
            fi
        # We were asked to backup a file that is not in our home directory
        else
            printf "Error: The specified backup file doe not reside inside your home directory\n"
        fi
    else
        printf "$back_up_dir Does not exist\n"
    fi

# Print the help if requested
elif [[ $1 == "-h" || $1 == "--help" ]]; then
    usage

# No valid arguments were given, so display a help
else
    usage
fi
