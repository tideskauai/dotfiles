#!/usr/bin/env bash

# Explanation: This script allows me to use dtach with vim so that I may deatch and
# re-attach later. By executing the script with no arguments a list of open sessions will
# be displayed, like so:
# > 0) /run/user/1000/vim-client.c
# > 1) /run/user/1000/vim-server.c
# > Re-attach to:
# If we select 0 dtach will reattach us to the file with the name client.c that we were
# previously editing. Running this script with a file name as 'first' and only argument
# we open the file in vim with a dtach session.

if (($# == 0)); then
    # Make an array with all the vim sockets we find in /var/run/user/<my_user_id>
    dtach_socket_list=($(find $XDG_RUNTIME_DIR -maxdepth 1 -type s -iname 'vim-*'))
    iter=${#dtach_socket_list[*]}

    for i in $(seq 0 1 $(($iter-1))); do
        echo -n "$i) "
        echo ${dtach_socket_list[$i]}
    done

    read -p "Re-attach to: " given_number
    # Only match numbers in the regex
    # Also make sure the var is not empty
    if [[ $given_number =~ ^[0-9]+$ ]] && [[ -n $given_number ]]; then
        if (($given_number < $iter)); then
            dtach -A "${dtach_socket_list[$given_number]}" vim
        else
            echo "The number you wrote is not a valid option"
        fi
    fi

#FIXME: What if user wants to give vim option parameters?
elif (($# == 1)) && [[ -f $1 ]]; then
    dtach -A $XDG_RUNTIME_DIR/vim-$(basename "$1") vim "$@"
fi
